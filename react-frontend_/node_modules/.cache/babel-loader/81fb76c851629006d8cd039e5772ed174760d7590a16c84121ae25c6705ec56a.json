{"ast":null,"code":"// import React, { useState } from \"react\";\n// import MapComponent from \"./MapComponent\";\n// import \"./App.css\";\n// import DailyLogSheet from \"./DailyLogSheet\";\n// import TripForm from \"./TripForm\";\n// import { Container, Row, Col } from \"react-bootstrap\";\n\n// function App() {\n//   const [logEntries, setLogEntries] = useState([]);\n//   const [tripDetails, setTripDetails] = useState(null);\n\n//   const handleFormSubmit = async (tripData) => {\n//     // Convert camelCase keys to snake_case\n//     const convertToSnakeCase = (obj) => {\n//       const newObj = {};\n//       for (const key in obj) {\n//         if (obj.hasOwnProperty(key)) {\n//           const snakeCaseKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n//           newObj[snakeCaseKey] = obj[key];\n//         }\n//       }\n//       return newObj;\n//     };\n\n//     const apiUrl = \"http://localhost:8000/api/trips/\"; //Django server endpoint\n//     try {\n//       // First, check if trip exists\n//       const checkTripResponse = await fetch(`${apiUrl}check_existing/`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(convertToSnakeCase(tripData)),\n//       });\n\n//       if (!checkTripResponse.ok) {\n//         console.error(\n//           \"Error checking existing trip:\",\n//           checkTripResponse.status\n//         );\n//         return;\n//       }\n\n//       const checkTripData = await checkTripResponse.json();\n\n//       let tripId;\n\n//       if (checkTripData.exists) {\n//         tripId = checkTripData.trip.id;\n//         setTripDetails(checkTripData.trip);\n//         //SetLogs\n//         const logsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//         if (!logsDataResponse.ok) {\n//           console.error(\"Error fetching logs:\", logsDataResponse.status);\n//           return;\n//         }\n//         let logsData = await logsDataResponse.json();\n\n//         if (!logsData || logsData.length === 0) {\n//           // Generate logs if they don't exist\n//           const generateLogsResponse = await fetch(\n//             `${apiUrl}${tripId}/generate_logs/`,\n//             {\n//               method: \"POST\",\n//             }\n//           );\n\n//           if (!generateLogsResponse.ok) {\n//             console.error(\n//               \"Error generating logs:\",\n//               generateLogsResponse.status\n//             );\n//             return;\n//           }\n\n//           // Fetch the newly generated logs\n//           const newLogsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//           if (!newLogsDataResponse.ok) {\n//             console.error(\n//               \"Error fetching newly generated logs:\",\n//               newLogsDataResponse.status\n//             );\n//             return;\n//           }\n//           logsData = await newLogsDataResponse.json();\n//         }\n//         setLogEntries(logsData || []);\n//       } else {\n//         // First, create the trip in the backend\n//         const response = await fetch(`${apiUrl}`, {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify(convertToSnakeCase(tripData)),\n//         });\n\n//         if (!response.ok) {\n//           console.error(\"Error creating trip:\", response.status);\n//           return;\n//         }\n\n//         const newTrip = await response.json();\n\n//         tripId = newTrip.id;\n\n//         setTripDetails(newTrip);\n\n//         // Then, generate logs for the trip\n//         const logsResponse = await fetch(`${apiUrl}${tripId}/generate_logs/`, {\n//           method: \"POST\",\n//         });\n\n//         if (!logsResponse.ok) {\n//           console.error(\"Error generating logs:\", logsResponse.status);\n//           return;\n//         }\n\n//         // Finally, fetch the generated logs\n//         const logsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//         if (!logsDataResponse.ok) {\n//           console.error(\"Error fetching logs:\", logsDataResponse.status);\n//           return;\n//         }\n\n//         const logsData = await logsDataResponse.json();\n//         setLogEntries(logsData);\n//       }\n//     } catch (error) {\n//       console.error(\"There was an issue\", error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <h1>Trucker Logbook App</h1>\n//       <Row>\n//         <Col md={6}>\n//           <TripForm onSubmit={handleFormSubmit} />\n//         </Col>\n//         <Col md={6}>\n//           {tripDetails && (\n//             <MapComponent\n//               startLocation={tripDetails.startLocation}\n//               pickupLocation={tripDetails.pickupLocation}\n//               dropoffLocation={tripDetails.dropoffLocation}\n//             />\n//           )}\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col>\n//           {logEntries.length > 0 && <DailyLogSheet logEntries={logEntries} />}\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/imaadfakier/Desktop/incomes/primary/corporate/hiring_process_tracker/spotter_ai/spotter_ai_logbook/react-frontend/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import MapComponent from \"./MapComponent\";\n// import \"./App.css\";\n// import DailyLogSheet from \"./DailyLogSheet\";\n// import TripForm from \"./TripForm\";\n// import { Container, Row, Col } from \"react-bootstrap\";\n\n// function App() {\n//   const [logEntries, setLogEntries] = useState([]);\n//   const [tripDetails, setTripDetails] = useState(null);\n\n//   const handleFormSubmit = async (tripData) => {\n//     // Convert camelCase keys to snake_case\n//     const convertToSnakeCase = (obj) => {\n//       const newObj = {};\n//       for (const key in obj) {\n//         if (obj.hasOwnProperty(key)) {\n//           const snakeCaseKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n//           newObj[snakeCaseKey] = obj[key];\n//         }\n//       }\n//       return newObj;\n//     };\n\n//     const apiUrl = \"http://localhost:8000/api/trips/\"; //Django server endpoint\n//     try {\n//       // First, check if trip exists\n//       const checkTripResponse = await fetch(`${apiUrl}check_existing/`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(convertToSnakeCase(tripData)),\n//       });\n\n//       if (!checkTripResponse.ok) {\n//         console.error(\n//           \"Error checking existing trip:\",\n//           checkTripResponse.status\n//         );\n//         return;\n//       }\n\n//       const checkTripData = await checkTripResponse.json();\n\n//       let tripId;\n\n//       if (checkTripData.exists) {\n//         tripId = checkTripData.trip.id;\n//         setTripDetails(checkTripData.trip);\n//         //SetLogs\n//         const logsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//         if (!logsDataResponse.ok) {\n//           console.error(\"Error fetching logs:\", logsDataResponse.status);\n//           return;\n//         }\n//         let logsData = await logsDataResponse.json();\n\n//         if (!logsData || logsData.length === 0) {\n//           // Generate logs if they don't exist\n//           const generateLogsResponse = await fetch(\n//             `${apiUrl}${tripId}/generate_logs/`,\n//             {\n//               method: \"POST\",\n//             }\n//           );\n\n//           if (!generateLogsResponse.ok) {\n//             console.error(\n//               \"Error generating logs:\",\n//               generateLogsResponse.status\n//             );\n//             return;\n//           }\n\n//           // Fetch the newly generated logs\n//           const newLogsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//           if (!newLogsDataResponse.ok) {\n//             console.error(\n//               \"Error fetching newly generated logs:\",\n//               newLogsDataResponse.status\n//             );\n//             return;\n//           }\n//           logsData = await newLogsDataResponse.json();\n//         }\n//         setLogEntries(logsData || []);\n//       } else {\n//         // First, create the trip in the backend\n//         const response = await fetch(`${apiUrl}`, {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify(convertToSnakeCase(tripData)),\n//         });\n\n//         if (!response.ok) {\n//           console.error(\"Error creating trip:\", response.status);\n//           return;\n//         }\n\n//         const newTrip = await response.json();\n\n//         tripId = newTrip.id;\n\n//         setTripDetails(newTrip);\n\n//         // Then, generate logs for the trip\n//         const logsResponse = await fetch(`${apiUrl}${tripId}/generate_logs/`, {\n//           method: \"POST\",\n//         });\n\n//         if (!logsResponse.ok) {\n//           console.error(\"Error generating logs:\", logsResponse.status);\n//           return;\n//         }\n\n//         // Finally, fetch the generated logs\n//         const logsDataResponse = await fetch(`${apiUrl}${tripId}/logs/`);\n//         if (!logsDataResponse.ok) {\n//           console.error(\"Error fetching logs:\", logsDataResponse.status);\n//           return;\n//         }\n\n//         const logsData = await logsDataResponse.json();\n//         setLogEntries(logsData);\n//       }\n//     } catch (error) {\n//       console.error(\"There was an issue\", error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <h1>Trucker Logbook App</h1>\n//       <Row>\n//         <Col md={6}>\n//           <TripForm onSubmit={handleFormSubmit} />\n//         </Col>\n//         <Col md={6}>\n//           {tripDetails && (\n//             <MapComponent\n//               startLocation={tripDetails.startLocation}\n//               pickupLocation={tripDetails.pickupLocation}\n//               dropoffLocation={tripDetails.dropoffLocation}\n//             />\n//           )}\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col>\n//           {logEntries.length > 0 && <DailyLogSheet logEntries={logEntries} />}\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}