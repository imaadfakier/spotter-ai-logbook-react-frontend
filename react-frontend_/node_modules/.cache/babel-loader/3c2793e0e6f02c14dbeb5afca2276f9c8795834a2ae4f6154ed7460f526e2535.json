{"ast":null,"code":"var _jsxFileName = \"/Users/imaadfakier/Desktop/incomes/primary/corporate/hiring_process_tracker/spotter_ai/spotter_ai_logbook/react-frontend/src/MapComponent.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\n// import \"leaflet-routing-machine\";\n// import \"./MapComponent.css\";\n\n// // Fix for Leaflet icon path (Method 1)\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n//   iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n//   shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n// });\n\n// const MapComponent = ({ startLocation, pickupLocation, dropoffLocation }) => {\n//   // console.log(startLocation, pickupLocation, dropoffLocation);\n\n//   const mapRef = useRef(null); // Ref to the map container div\n//   const mapInstance = useRef(null); // Ref to store the leaflet map instance\n\n//   useEffect(() => {\n//     const createMap = async () => {\n//       if (mapRef.current) {\n//         // Check if the map container exists AND the map hasn't been initialized yet using L.DomUtil.get\n//         const existingMap = L.DomUtil.get(\"map\"); // Use L.DomUtil.get to check if map already exists\n\n//         if (!existingMap?._leaflet_id) {\n//           // Only initialize if the map hasn't been initialized on this element\n//           const map = L.map(mapRef.current, {\n//             center: [40.7128, -74.006],\n//             zoom: 8,\n//             scrollWheelZoom: false,\n//           });\n\n//           L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//             attribution:\n//               '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n//           }).addTo(map);\n\n//           // Geocoding function (replace with a real geocoding service)\n//           const geocode = async (location) => {\n//             console.warn(\n//               \"Geocoding is not fully implemented -- using a dummy lat/lon value\"\n//             );\n//             switch (location) {\n//               case \"Miami, FL\":\n//                 return [25.7617, -80.1918]; // Miami coordinates\n//               case \"Orlando, FL\":\n//                 return [28.5383, -81.3792]; // Orlando coordinates\n//               case \"Jacksonville, FL\":\n//                 return [30.3322, -81.6557]; // Jacksonville coordinates\n//               default:\n//                 return null;\n//             }\n//           };\n\n//           const createRoutingControl = async () => {\n//             const startCoords = await geocode(startLocation);\n//             const pickupCoords = await geocode(pickupLocation);\n//             const dropoffCoords = await geocode(dropoffLocation);\n\n//             if (!startCoords || !pickupCoords || !dropoffCoords) {\n//               console.error(\"Could not geocode all locations\");\n//               return;\n//             }\n\n//             L.Routing.control({\n//               waypoints: [\n//                 L.latLng(startCoords),\n//                 L.latLng(pickupCoords),\n//                 L.latLng(dropoffCoords),\n//               ],\n//               routeWhileDragging: false,\n//               showAlternatives: false,\n//               serviceUrl: \"http://router.project-osrm.org/route/v1\",\n//             }).addTo(map);\n//           };\n\n//           await createRoutingControl(); // Make sure the routing is added after geocoding\n\n//           mapInstance.current = map; // Store the map instance in the ref\n//         } else {\n//           console.log(\"Map already initialized, skipping initialization.\");\n//         }\n//       }\n//     };\n\n//     createMap();\n\n//     return () => {\n//       if (mapInstance.current) {\n//         mapInstance.current.remove(); // Clean up the map on unmount\n//       }\n//     };\n//   }, [startLocation, pickupLocation, dropoffLocation]); // Dependencies for the useEffect\n\n//   return <div id=\"map\" ref={mapRef} style={{ height: \"500px\" }}></div>;\n// };\n\n// export default MapComponent;\n\nimport React, { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\nimport \"leaflet-routing-machine\";\nimport \"./MapComponent.css\";\n\n// Fix for Leaflet icon path (Method 1)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\nconst MapComponent = ({\n  startLocation,\n  pickupLocation,\n  dropoffLocation,\n  tripId\n}) => {\n  _s();\n  const mapRef = useRef(null); // Ref to the map container div\n  const mapInstance = useRef(null); // Ref to store the leaflet map instance\n\n  useEffect(() => {\n    const createMap = async () => {\n      //Ensure the map has not been mounted, or is no longer mounted\n      if (!mapRef.current) {\n        //console.log(\"Skipping Map Creation due to null mapRef\");\n        return;\n      }\n      if (mapInstance.current) {\n        console.log(\"skipping duplicate map creation\");\n        return; // Map exists and is being rendered\n      }\n      const mapElement = document.getElementById(\"map\");\n      if (!mapElement) {\n        console.log('cannot find element map in document.getElementID(\"map\")');\n        return;\n      }\n      if (mapElement.className.includes(\"leaflet-container\")) {\n        console.log(\"leaflet exists already\"); // Map Exists already\n        return;\n      }\n      // Check that Leaflet has not already initialised on it already\n      const map = L.map(mapRef.current, {\n        center: [40.7128, -74.006],\n        zoom: 8,\n        scrollWheelZoom: false\n      });\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(map);\n      mapInstance.current = map; // Store the map instance in the ref\n    };\n    createMap();\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove(); // Clean up the map on unmount\n        mapInstance.current = null; // Delete the ref to the map so that is not rendered.\n      }\n    };\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    const fetchLogsAndCreateRouting = async () => {\n      const logsDataResponse = await fetch(`http://localhost:8000/api/trips/${tripId}/logs/`);\n      let logsData = null;\n      if (mapInstance.current && tripId) {\n        try {\n          var _logsData, _logsData2, _logsData3;\n          if (!logsDataResponse.ok) {\n            console.error(\"Error fetching logs:\", logsDataResponse.status);\n            return;\n          }\n          logsData = await logsDataResponse.json();\n\n          // Validate log data and extract the coordinates (add safe navigation)\n          const startLog = (_logsData = logsData) === null || _logsData === void 0 ? void 0 : _logsData[0];\n          const pickupLog = (_logsData2 = logsData) === null || _logsData2 === void 0 ? void 0 : _logsData2[7];\n          const dropoffLog = (_logsData3 = logsData) === null || _logsData3 === void 0 ? void 0 : _logsData3[9];\n          if (!startLog || !pickupLog || !dropoffLog) {\n            console.error(\"Missing log entries for start, pickup, or dropoff location.  Length of the logs is:\", logsData.length);\n            return;\n          }\n          const startCoords = [startLog.latitude, startLog.longitude];\n          const pickupCoords = [pickupLog.latitude, pickupLog.longitude];\n          const dropoffCoords = [dropoffLog.latitude, dropoffLog.longitude];\n\n          // Create Routing Control\n          L.Routing.control({\n            waypoints: [L.latLng(startCoords), L.latLng(pickupCoords), L.latLng(dropoffCoords)],\n            routeWhileDragging: false,\n            showAlternatives: false,\n            serviceUrl: \"http://router.project-osrm.org/route/v1\"\n          }).addTo(mapInstance.current);\n        } catch (error) {\n          console.error(\"Error fetching or processing logs:\", error);\n        }\n      }\n    };\n    fetchLogsAndCreateRouting();\n  }, [tripId]); // Run when tripId changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    ref: mapRef,\n    style: {\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 10\n  }, this);\n};\n_s(MapComponent, \"UDYcYF2X53ilIungktaZPhIsjyY=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapComponent","startLocation","pickupLocation","dropoffLocation","tripId","_s","mapRef","mapInstance","createMap","current","console","log","mapElement","document","getElementById","className","includes","map","center","zoom","scrollWheelZoom","tileLayer","attribution","addTo","remove","fetchLogsAndCreateRouting","logsDataResponse","fetch","logsData","_logsData","_logsData2","_logsData3","ok","error","status","json","startLog","pickupLog","dropoffLog","length","startCoords","latitude","longitude","pickupCoords","dropoffCoords","Routing","control","waypoints","latLng","routeWhileDragging","showAlternatives","serviceUrl","id","ref","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/imaadfakier/Desktop/incomes/primary/corporate/hiring_process_tracker/spotter_ai/spotter_ai_logbook/react-frontend/src/MapComponent.jsx"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\n// import \"leaflet-routing-machine\";\n// import \"./MapComponent.css\";\n\n// // Fix for Leaflet icon path (Method 1)\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n//   iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n//   shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n// });\n\n// const MapComponent = ({ startLocation, pickupLocation, dropoffLocation }) => {\n//   // console.log(startLocation, pickupLocation, dropoffLocation);\n\n//   const mapRef = useRef(null); // Ref to the map container div\n//   const mapInstance = useRef(null); // Ref to store the leaflet map instance\n\n//   useEffect(() => {\n//     const createMap = async () => {\n//       if (mapRef.current) {\n//         // Check if the map container exists AND the map hasn't been initialized yet using L.DomUtil.get\n//         const existingMap = L.DomUtil.get(\"map\"); // Use L.DomUtil.get to check if map already exists\n\n//         if (!existingMap?._leaflet_id) {\n//           // Only initialize if the map hasn't been initialized on this element\n//           const map = L.map(mapRef.current, {\n//             center: [40.7128, -74.006],\n//             zoom: 8,\n//             scrollWheelZoom: false,\n//           });\n\n//           L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//             attribution:\n//               '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n//           }).addTo(map);\n\n//           // Geocoding function (replace with a real geocoding service)\n//           const geocode = async (location) => {\n//             console.warn(\n//               \"Geocoding is not fully implemented -- using a dummy lat/lon value\"\n//             );\n//             switch (location) {\n//               case \"Miami, FL\":\n//                 return [25.7617, -80.1918]; // Miami coordinates\n//               case \"Orlando, FL\":\n//                 return [28.5383, -81.3792]; // Orlando coordinates\n//               case \"Jacksonville, FL\":\n//                 return [30.3322, -81.6557]; // Jacksonville coordinates\n//               default:\n//                 return null;\n//             }\n//           };\n\n//           const createRoutingControl = async () => {\n//             const startCoords = await geocode(startLocation);\n//             const pickupCoords = await geocode(pickupLocation);\n//             const dropoffCoords = await geocode(dropoffLocation);\n\n//             if (!startCoords || !pickupCoords || !dropoffCoords) {\n//               console.error(\"Could not geocode all locations\");\n//               return;\n//             }\n\n//             L.Routing.control({\n//               waypoints: [\n//                 L.latLng(startCoords),\n//                 L.latLng(pickupCoords),\n//                 L.latLng(dropoffCoords),\n//               ],\n//               routeWhileDragging: false,\n//               showAlternatives: false,\n//               serviceUrl: \"http://router.project-osrm.org/route/v1\",\n//             }).addTo(map);\n//           };\n\n//           await createRoutingControl(); // Make sure the routing is added after geocoding\n\n//           mapInstance.current = map; // Store the map instance in the ref\n//         } else {\n//           console.log(\"Map already initialized, skipping initialization.\");\n//         }\n//       }\n//     };\n\n//     createMap();\n\n//     return () => {\n//       if (mapInstance.current) {\n//         mapInstance.current.remove(); // Clean up the map on unmount\n//       }\n//     };\n//   }, [startLocation, pickupLocation, dropoffLocation]); // Dependencies for the useEffect\n\n//   return <div id=\"map\" ref={mapRef} style={{ height: \"500px\" }}></div>;\n// };\n\n// export default MapComponent;\n\nimport React, { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\nimport \"leaflet-routing-machine\";\nimport \"./MapComponent.css\";\n\n// Fix for Leaflet icon path (Method 1)\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n});\n\nconst MapComponent = ({\n  startLocation,\n  pickupLocation,\n  dropoffLocation,\n  tripId,\n}) => {\n  const mapRef = useRef(null); // Ref to the map container div\n  const mapInstance = useRef(null); // Ref to store the leaflet map instance\n\n  useEffect(() => {\n    const createMap = async () => {\n      //Ensure the map has not been mounted, or is no longer mounted\n      if (!mapRef.current) {\n        //console.log(\"Skipping Map Creation due to null mapRef\");\n        return;\n      }\n\n      if (mapInstance.current) {\n        console.log(\"skipping duplicate map creation\");\n        return; // Map exists and is being rendered\n      }\n\n      const mapElement = document.getElementById(\"map\");\n      if (!mapElement) {\n        console.log('cannot find element map in document.getElementID(\"map\")');\n        return;\n      }\n\n      if (mapElement.className.includes(\"leaflet-container\")) {\n        console.log(\"leaflet exists already\"); // Map Exists already\n        return;\n      }\n      // Check that Leaflet has not already initialised on it already\n      const map = L.map(mapRef.current, {\n        center: [40.7128, -74.006],\n        zoom: 8,\n        scrollWheelZoom: false,\n      });\n\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution:\n          '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }).addTo(map);\n\n      mapInstance.current = map; // Store the map instance in the ref\n    };\n\n    createMap();\n\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove(); // Clean up the map on unmount\n        mapInstance.current = null; // Delete the ref to the map so that is not rendered.\n      }\n    };\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    const fetchLogsAndCreateRouting = async () => {\n      const logsDataResponse = await fetch(\n        `http://localhost:8000/api/trips/${tripId}/logs/`\n      );\n\n      let logsData = null;\n      if (mapInstance.current && tripId) {\n        try {\n          if (!logsDataResponse.ok) {\n            console.error(\"Error fetching logs:\", logsDataResponse.status);\n            return;\n          }\n\n          logsData = await logsDataResponse.json();\n\n          // Validate log data and extract the coordinates (add safe navigation)\n          const startLog = logsData?.[0];\n          const pickupLog = logsData?.[7];\n          const dropoffLog = logsData?.[9];\n\n          if (!startLog || !pickupLog || !dropoffLog) {\n            console.error(\n              \"Missing log entries for start, pickup, or dropoff location.  Length of the logs is:\",\n              logsData.length\n            );\n            return;\n          }\n\n          const startCoords = [startLog.latitude, startLog.longitude];\n          const pickupCoords = [pickupLog.latitude, pickupLog.longitude];\n          const dropoffCoords = [dropoffLog.latitude, dropoffLog.longitude];\n\n          // Create Routing Control\n          L.Routing.control({\n            waypoints: [\n              L.latLng(startCoords),\n              L.latLng(pickupCoords),\n              L.latLng(dropoffCoords),\n            ],\n            routeWhileDragging: false,\n            showAlternatives: false,\n            serviceUrl: \"http://router.project-osrm.org/route/v1\",\n          }).addTo(mapInstance.current);\n        } catch (error) {\n          console.error(\"Error fetching or processing logs:\", error);\n        }\n      }\n    };\n\n    fetchLogsAndCreateRouting();\n  }, [tripId]); // Run when tripId changes\n\n  return <div id=\"map\" ref={mapRef} style={{ height: \"500px\" }}></div>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}